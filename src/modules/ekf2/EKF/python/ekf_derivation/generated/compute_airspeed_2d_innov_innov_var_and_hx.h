// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_airspeed_2d_innov_innov_var_and_hx
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     airspeed_2d: Matrix21
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov: Matrix21
 *     innov_var: Matrix21
 *     Hx: Matrix23_1
 */
template <typename Scalar>
void ComputeAirspeed2DInnovInnovVarAndHx(const matrix::Matrix<Scalar, 24, 1>& state,
                                         const matrix::Matrix<Scalar, 23, 23>& P,
                                         const matrix::Matrix<Scalar, 2, 1>& airspeed_2d,
                                         const Scalar R, const Scalar epsilon,
                                         matrix::Matrix<Scalar, 2, 1>* const innov = nullptr,
                                         matrix::Matrix<Scalar, 2, 1>* const innov_var = nullptr,
                                         matrix::Matrix<Scalar, 23, 1>* const Hx = nullptr) {
  // Total ops: 287

  // Unused inputs
  (void)epsilon;

  // Input arrays

  // Intermediate terms (33)
  const Scalar _tmp0 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp2 = 1 - 2 * _tmp1;
  const Scalar _tmp3 = -2 * _tmp0 + _tmp2;
  const Scalar _tmp4 = -state(22, 0) + state(4, 0);
  const Scalar _tmp5 = 2 * state(0, 0);
  const Scalar _tmp6 = _tmp5 * state(3, 0);
  const Scalar _tmp7 = 2 * state(2, 0);
  const Scalar _tmp8 = _tmp7 * state(1, 0);
  const Scalar _tmp9 = _tmp6 + _tmp8;
  const Scalar _tmp10 = -state(23, 0) + state(5, 0);
  const Scalar _tmp11 = _tmp7 * state(0, 0);
  const Scalar _tmp12 = -_tmp11;
  const Scalar _tmp13 = 2 * state(1, 0) * state(3, 0);
  const Scalar _tmp14 = _tmp12 + _tmp13;
  const Scalar _tmp15 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp16 = -2 * _tmp15 + _tmp2;
  const Scalar _tmp17 = -_tmp6;
  const Scalar _tmp18 = _tmp17 + _tmp8;
  const Scalar _tmp19 = _tmp7 * state(3, 0);
  const Scalar _tmp20 = _tmp5 * state(1, 0);
  const Scalar _tmp21 = _tmp19 + _tmp20;
  const Scalar _tmp22 = _tmp18 * _tmp4 + _tmp21 * state(6, 0);
  const Scalar _tmp23 = -_tmp1;
  const Scalar _tmp24 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp25 = -_tmp15;
  const Scalar _tmp26 = _tmp10 * (_tmp0 + _tmp23 + _tmp24 + _tmp25) + _tmp22;
  const Scalar _tmp27 = -_tmp13;
  const Scalar _tmp28 = _tmp0 - _tmp24;
  const Scalar _tmp29 = _tmp10 * (-_tmp19 + _tmp20) + _tmp4 * (_tmp12 + _tmp27) +
                        state(6, 0) * (_tmp15 + _tmp23 + _tmp28);
  const Scalar _tmp30 = _tmp1 + _tmp25;
  const Scalar _tmp31 = _tmp10 * (_tmp19 - _tmp20) + _tmp4 * (_tmp11 + _tmp13) +
                        state(6, 0) * (-_tmp0 + _tmp24 + _tmp30);
  const Scalar _tmp32 =
      _tmp10 * (_tmp17 - _tmp8) + _tmp4 * (_tmp28 + _tmp30) + state(6, 0) * (_tmp11 + _tmp27);

  // Output terms (3)
  if (innov != nullptr) {
    matrix::Matrix<Scalar, 2, 1>& _innov = (*innov);

    _innov(0, 0) = _tmp10 * _tmp9 + _tmp14 * state(6, 0) + _tmp3 * _tmp4 - airspeed_2d(0, 0);
    _innov(1, 0) = _tmp10 * _tmp16 + _tmp22 - airspeed_2d(1, 0);
  }

  if (innov_var != nullptr) {
    matrix::Matrix<Scalar, 2, 1>& _innov_var = (*innov_var);

    _innov_var(0, 0) =
        R +
        _tmp14 * (P(1, 5) * _tmp29 + P(2, 5) * _tmp26 - P(21, 5) * _tmp3 - P(22, 5) * _tmp9 +
                  P(3, 5) * _tmp3 + P(4, 5) * _tmp9 + P(5, 5) * _tmp14) +
        _tmp26 * (P(1, 2) * _tmp29 + P(2, 2) * _tmp26 - P(21, 2) * _tmp3 - P(22, 2) * _tmp9 +
                  P(3, 2) * _tmp3 + P(4, 2) * _tmp9 + P(5, 2) * _tmp14) +
        _tmp29 * (P(1, 1) * _tmp29 + P(2, 1) * _tmp26 - P(21, 1) * _tmp3 - P(22, 1) * _tmp9 +
                  P(3, 1) * _tmp3 + P(4, 1) * _tmp9 + P(5, 1) * _tmp14) -
        _tmp3 * (P(1, 21) * _tmp29 + P(2, 21) * _tmp26 - P(21, 21) * _tmp3 - P(22, 21) * _tmp9 +
                 P(3, 21) * _tmp3 + P(4, 21) * _tmp9 + P(5, 21) * _tmp14) +
        _tmp3 * (P(1, 3) * _tmp29 + P(2, 3) * _tmp26 - P(21, 3) * _tmp3 - P(22, 3) * _tmp9 +
                 P(3, 3) * _tmp3 + P(4, 3) * _tmp9 + P(5, 3) * _tmp14) -
        _tmp9 * (P(1, 22) * _tmp29 + P(2, 22) * _tmp26 - P(21, 22) * _tmp3 - P(22, 22) * _tmp9 +
                 P(3, 22) * _tmp3 + P(4, 22) * _tmp9 + P(5, 22) * _tmp14) +
        _tmp9 * (P(1, 4) * _tmp29 + P(2, 4) * _tmp26 - P(21, 4) * _tmp3 - P(22, 4) * _tmp9 +
                 P(3, 4) * _tmp3 + P(4, 4) * _tmp9 + P(5, 4) * _tmp14);
    _innov_var(1, 0) =
        R -
        _tmp16 * (P(0, 22) * _tmp31 + P(2, 22) * _tmp32 - P(21, 22) * _tmp18 - P(22, 22) * _tmp16 +
                  P(3, 22) * _tmp18 + P(4, 22) * _tmp16 + P(5, 22) * _tmp21) +
        _tmp16 * (P(0, 4) * _tmp31 + P(2, 4) * _tmp32 - P(21, 4) * _tmp18 - P(22, 4) * _tmp16 +
                  P(3, 4) * _tmp18 + P(4, 4) * _tmp16 + P(5, 4) * _tmp21) -
        _tmp18 * (P(0, 21) * _tmp31 + P(2, 21) * _tmp32 - P(21, 21) * _tmp18 - P(22, 21) * _tmp16 +
                  P(3, 21) * _tmp18 + P(4, 21) * _tmp16 + P(5, 21) * _tmp21) +
        _tmp18 * (P(0, 3) * _tmp31 + P(2, 3) * _tmp32 - P(21, 3) * _tmp18 - P(22, 3) * _tmp16 +
                  P(3, 3) * _tmp18 + P(4, 3) * _tmp16 + P(5, 3) * _tmp21) +
        _tmp21 * (P(0, 5) * _tmp31 + P(2, 5) * _tmp32 - P(21, 5) * _tmp18 - P(22, 5) * _tmp16 +
                  P(3, 5) * _tmp18 + P(4, 5) * _tmp16 + P(5, 5) * _tmp21) +
        _tmp31 * (P(0, 0) * _tmp31 + P(2, 0) * _tmp32 - P(21, 0) * _tmp18 - P(22, 0) * _tmp16 +
                  P(3, 0) * _tmp18 + P(4, 0) * _tmp16 + P(5, 0) * _tmp21) +
        _tmp32 * (P(0, 2) * _tmp31 + P(2, 2) * _tmp32 - P(21, 2) * _tmp18 - P(22, 2) * _tmp16 +
                  P(3, 2) * _tmp18 + P(4, 2) * _tmp16 + P(5, 2) * _tmp21);
  }

  if (Hx != nullptr) {
    matrix::Matrix<Scalar, 23, 1>& _hx = (*Hx);

    _hx.setZero();

    _hx(1, 0) = _tmp29;
    _hx(2, 0) = _tmp26;
    _hx(3, 0) = _tmp3;
    _hx(4, 0) = _tmp9;
    _hx(5, 0) = _tmp14;
    _hx(21, 0) = -_tmp3;
    _hx(22, 0) = -_tmp9;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
