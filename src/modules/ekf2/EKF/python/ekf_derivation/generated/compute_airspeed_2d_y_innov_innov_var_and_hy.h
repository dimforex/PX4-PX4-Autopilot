// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: compute_airspeed_2d_y_innov_innov_var_and_hy
 *
 * Args:
 *     state: Matrix24_1
 *     P: Matrix23_23
 *     airspeed_2d: Matrix21
 *     R: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     innov: Scalar
 *     innov_var: Scalar
 *     Hy: Matrix23_1
 */
template <typename Scalar>
void ComputeAirspeed2DYInnovInnovVarAndHy(const matrix::Matrix<Scalar, 24, 1>& state,
                                          const matrix::Matrix<Scalar, 23, 23>& P,
                                          const matrix::Matrix<Scalar, 2, 1>& airspeed_2d,
                                          const Scalar R, const Scalar epsilon,
                                          Scalar* const innov = nullptr,
                                          Scalar* const innov_var = nullptr,
                                          matrix::Matrix<Scalar, 23, 1>* const Hy = nullptr) {
  // Total ops: 154

  // Unused inputs
  (void)epsilon;

  // Input arrays

  // Intermediate terms (20)
  const Scalar _tmp0 = std::pow(state(3, 0), Scalar(2));
  const Scalar _tmp1 = std::pow(state(1, 0), Scalar(2));
  const Scalar _tmp2 = -2 * _tmp0 - 2 * _tmp1 + 1;
  const Scalar _tmp3 = -state(23, 0) + state(5, 0);
  const Scalar _tmp4 = 2 * state(0, 0);
  const Scalar _tmp5 = -_tmp4 * state(3, 0);
  const Scalar _tmp6 = 2 * state(2, 0);
  const Scalar _tmp7 = _tmp6 * state(1, 0);
  const Scalar _tmp8 = _tmp5 + _tmp7;
  const Scalar _tmp9 = -state(22, 0) + state(4, 0);
  const Scalar _tmp10 = _tmp6 * state(3, 0);
  const Scalar _tmp11 = _tmp4 * state(1, 0);
  const Scalar _tmp12 = _tmp10 + _tmp11;
  const Scalar _tmp13 = _tmp6 * state(0, 0);
  const Scalar _tmp14 = 2 * state(1, 0) * state(3, 0);
  const Scalar _tmp15 = std::pow(state(0, 0), Scalar(2));
  const Scalar _tmp16 = std::pow(state(2, 0), Scalar(2));
  const Scalar _tmp17 = _tmp0 - _tmp1;
  const Scalar _tmp18 = _tmp3 * (_tmp10 - _tmp11) + _tmp9 * (_tmp13 + _tmp14) +
                        state(6, 0) * (_tmp15 - _tmp16 + _tmp17);
  const Scalar _tmp19 = _tmp3 * (_tmp5 - _tmp7) + _tmp9 * (-_tmp15 + _tmp16 + _tmp17) +
                        state(6, 0) * (_tmp13 - _tmp14);

  // Output terms (3)
  if (innov != nullptr) {
    Scalar& _innov = (*innov);

    _innov = _tmp12 * state(6, 0) + _tmp2 * _tmp3 + _tmp8 * _tmp9 - airspeed_2d(1, 0);
  }

  if (innov_var != nullptr) {
    Scalar& _innov_var = (*innov_var);

    _innov_var =
        R +
        _tmp12 * (P(0, 5) * _tmp18 + P(2, 5) * _tmp19 - P(21, 5) * _tmp8 - P(22, 5) * _tmp2 +
                  P(3, 5) * _tmp8 + P(4, 5) * _tmp2 + P(5, 5) * _tmp12) +
        _tmp18 * (P(0, 0) * _tmp18 + P(2, 0) * _tmp19 - P(21, 0) * _tmp8 - P(22, 0) * _tmp2 +
                  P(3, 0) * _tmp8 + P(4, 0) * _tmp2 + P(5, 0) * _tmp12) +
        _tmp19 * (P(0, 2) * _tmp18 + P(2, 2) * _tmp19 - P(21, 2) * _tmp8 - P(22, 2) * _tmp2 +
                  P(3, 2) * _tmp8 + P(4, 2) * _tmp2 + P(5, 2) * _tmp12) -
        _tmp2 * (P(0, 22) * _tmp18 + P(2, 22) * _tmp19 - P(21, 22) * _tmp8 - P(22, 22) * _tmp2 +
                 P(3, 22) * _tmp8 + P(4, 22) * _tmp2 + P(5, 22) * _tmp12) +
        _tmp2 * (P(0, 4) * _tmp18 + P(2, 4) * _tmp19 - P(21, 4) * _tmp8 - P(22, 4) * _tmp2 +
                 P(3, 4) * _tmp8 + P(4, 4) * _tmp2 + P(5, 4) * _tmp12) -
        _tmp8 * (P(0, 21) * _tmp18 + P(2, 21) * _tmp19 - P(21, 21) * _tmp8 - P(22, 21) * _tmp2 +
                 P(3, 21) * _tmp8 + P(4, 21) * _tmp2 + P(5, 21) * _tmp12) +
        _tmp8 * (P(0, 3) * _tmp18 + P(2, 3) * _tmp19 - P(21, 3) * _tmp8 - P(22, 3) * _tmp2 +
                 P(3, 3) * _tmp8 + P(4, 3) * _tmp2 + P(5, 3) * _tmp12);
  }

  if (Hy != nullptr) {
    matrix::Matrix<Scalar, 23, 1>& _hy = (*Hy);

    _hy.setZero();

    _hy(0, 0) = _tmp18;
    _hy(2, 0) = _tmp19;
    _hy(3, 0) = _tmp8;
    _hy(4, 0) = _tmp2;
    _hy(5, 0) = _tmp12;
    _hy(21, 0) = -_tmp8;
    _hy(22, 0) = -_tmp2;
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
